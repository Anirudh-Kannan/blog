(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{682:function(t,e,a){t.exports=a.p+"assets/img/self-training.5f98457e.jpg"},683:function(t,e,a){t.exports=a.p+"assets/img/bar.4e0a6fe6.png"},684:function(t,e,a){t.exports=a.p+"assets/img/analysis.fd9ddd49.png"},782:function(t,e,a){"use strict";a.r(e);var i=a(17),n=Object(i.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("p",[t._v("Self-training is a very prevalent semi-supervised method. Its key idea is to augment the original labeled dataset with unlabeled data paired with the model's prediction (i.e. the "),i("em",[t._v("pseudo-parallel")]),t._v(" data). Self-training has been widely used in classification tasks. However, will it work on sequence generation tasks (e.g. machine translation)? If so, how does it work? This blog introduces a work [1] which investigates these questions and gives the answers.")]),t._v(" "),i("p",[t._v("Reading Time: About 10 minutes.")]),t._v(" "),i("p",[t._v("Paper：https://arxiv.org/abs/1909.13788")]),t._v(" "),i("p",[t._v("Github: https://github.com/jxhe/self-training-text-generation")]),t._v(" "),i("h2",{attrs:{id:"_1-introduction"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-introduction"}},[t._v("#")]),t._v(" 1. Introduction")]),t._v(" "),i("p",[i("img",{attrs:{src:a(682),alt:"image1"}}),t._v("\nDeep neural networks often require large amounts of labeled data to achieve good performance. However, it is very costly to acquire labels. So what if there is not enough labeled data? Researchers try to fully utilize the unlabeled data to improve the model performance. Self-training is a simple but effective method. As can be seen in the figure above, in self-training, a base model trained with labeled data acts as a “teacher” to label the unannotated data, which is then used to augment the original small training set. Then, a “student” model is trained with this new training set to yield the final model. Self-training is originally designed for classification problems, and it is believed that this method may be effective only when a good fraction of the predictions on unlabeled samples are correct, otherwise errors will be accumulated.")]),t._v(" "),i("p",[t._v("However, self-training has not been studied extensively in neural sequence generation tasks like machine translation, where the target output is natural language. So the question arises: can self-training still be useful in this case? Here we introduce a work [1] which investigate the problem and answer the two questions:")]),t._v(" "),i("ol",[i("li",[t._v("How does self-training perform in sequence generation tasks like machine translation?")]),t._v(" "),i("li",[t._v("If self-training helps improving the baseline, what contributes to its success?")])]),t._v(" "),i("h2",{attrs:{id:"_2-case-study-on-machine-translation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-case-study-on-machine-translation"}},[t._v("#")]),t._v(" 2. Case Study on Machine Translation")]),t._v(" "),i("p",[t._v("The authors first analyze the machine translation task, and then perform ablation analysis to understand the contributing factors of the performance gains.")]),t._v(" "),i("p",[t._v("They work with the standard WMT 2014 English-German dataset. As a preliminary experiment, they randomly sample 100K sentences from the training set (WMT100K) and use the remaining English sentences as the unlabeled monolingual data. They train with the Base Transformer architecture and use beam search decoding (beam size 5).")]),t._v(" "),i("p",[i("img",{attrs:{src:a(683),alt:"image2"}}),t._v("\nGreen bars in the above figure shows the result of applying self-training for three iterations, which includes:")]),t._v(" "),i("ol",[i("li",[t._v("Pseudo-training (PT): the first step of self-training where we train a new model (from scratch) using only the pseudo parallel data generated by the current model")]),t._v(" "),i("li",[t._v("Fine-tuning (FT): the fine-tuned system using real parallel data based on the pretrained model from the PT step.")])]),t._v(" "),i("p",[t._v("It is surprising that the pseudo-training step at the first iteration is able to improve BLEU even if the model is only trained on its own predictions, and fine-tuning further boosts the performance. An explanation is that the added pseudo-parallel data might implicitly change the training trajectory towards a (somehow) better local optimum, given that we train a new model from scratch at each iteration.")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Methods")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("PT")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("FT")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("baseline")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("15.6")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("baseline (w/o dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("5.2")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ST (beam search, w/ dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("16.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("17.5")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ST (sampling, w/ dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("16.1")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("17.0")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ST (beam search, w/o dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("15.8")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("16.3")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("ST (sampling, w/o dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("15.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("16.0")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Noisy ST (beam search, w/o dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("15.8")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("17.9")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Noisy ST (beam search, w/ dropout)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("16.6")])]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("19.3")])])])])]),t._v(" "),i("h2",{attrs:{id:"_3-the-secret-behind-self-training"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-the-secret-behind-self-training"}},[t._v("#")]),t._v(" 3. The Secret Behind Self-training")]),t._v(" "),i("p",[t._v("To decode the secret of self-training and understand where the gain comes from, they formulate two hypotheses:")]),t._v(" "),i("ol",[i("li",[i("p",[i("strong",[t._v("Decoding Strategy")]),t._v(":\nAccording to this hypothesis, the gains come from the use of beam search for decoding unlabeled data. The above table shows the performance using different decoding strategies. As can be seen, the performance drops by 0.5 BLEU when the decoding strategy is changed to sampling, which implies that beam search does contribute a bit to the performance gains. This phenomenon makes sense intuitively since beam search tends to generate higher-quality pseudo targets than sampling. However, the decoding strategy hypothesis does not fully explain it, as there is still a gain of 1.4 BLEU points over the baseline from sampling decoding with dropout.")])]),t._v(" "),i("li",[i("p",[i("strong",[t._v("Dropout")]),t._v(":\nThe results in the above table indicate that without dropout the performance of beam search decoding drops by 1.2 BLEU, just 0.7 BLEU higher than the baseline. Moreover, the pseudo-training performance of sampling without dropout is almost the same as the baseline.")])])]),t._v(" "),i("p",[t._v("In summary, beam-search decoding contributes only partially to the performance gains, while the implicit perturbation i.e., dropout accounts for most of it. The authors also conduct experiment on a toy dataset to show that noise is beneficial for self-training because it enforces local smoothness for this task, that is, semantically similar inputs are mapped to the same or similar targets.")]),t._v(" "),i("h2",{attrs:{id:"_4-the-proposed-method-noisy-self-training"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-the-proposed-method-noisy-self-training"}},[t._v("#")]),t._v(" 4. The Proposed Method: Noisy Self-training")]),t._v(" "),i("p",[t._v("To further improve performance, the authors considers a simple model-agnostic perturbation process - perturbing the input, which is referred to as "),i("em",[t._v("noisy self-training")]),t._v(".\nNote that they apply both input perturbation and dropout in the pseudo-training step for noisy ST.\nThey first apply noisy ST to the WMT100K translation task. Two different perturbation function are tested:")]),t._v(" "),i("ol",[i("li",[t._v("Synthetic noise: the input tokens are randomly dropped, masked, and shuffled.")]),t._v(" "),i("li",[t._v("Paraphrase: they translate the source English sentences to German and translate it back to obtain a paraphrase as the perturbation.")])]),t._v(" "),i("p",[t._v("Figure 2 shows the results over three iterations. Noisy ST greatly outperforms the supervised baseline and normal ST, while synthetic noise does not exhibit much difference from paraphrase. Since synthetic noise is much simpler and more general, it is defaulted in Noisy ST.\nTable 1 also reports an ablation study of Noisy ST when removing dropout at the pseudo-training step. Noisy ST without dropout improves the baseline by 2.3 BLEU points and is comparable to normal ST with dropout. When combined together, noisy ST with dropout produces another 1.4 BLEU improvement, indicating that the two perturbations are complementary.")]),t._v(" "),i("h2",{attrs:{id:"_5-experiments"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_5-experiments"}},[t._v("#")]),t._v(" 5. Experiments")]),t._v(" "),i("h3",{attrs:{id:"machine-translation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#machine-translation"}},[t._v("#")]),t._v(" Machine Translation")]),t._v(" "),i("p",[t._v("The author test the proposed noisy ST on a high-resource MT benchmark: WMT14 English-German and a low-resource one: FloRes English-Nepali.")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"left"}},[t._v("Methods")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("WMT14 100K")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("WMT14 3.9M")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("FloRes En-Origin")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("FloRes Ne-Origin")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("FloRes Overall")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("baseline")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("15.6")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("28.3")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("6.7")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("2.3")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("4.8")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("BT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("20.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("8.2")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("4.5")])]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("6.5")])])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"left"}},[t._v("Noisy ST")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("21.4")])]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("29.3")])]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("8.9")])]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("3.5")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[i("strong",[t._v("6.5")])])])])]),t._v(" "),i("p",[t._v("The overall results are shown in the above table. For almost all cases in both datasets, the noisy ST outperforms the baselines by a large margin, and noisy ST still improves the baseline even when this is very weak.")]),t._v(" "),i("h4",{attrs:{id:"comparison-with-back-translation"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#comparison-with-back-translation"}},[t._v("#")]),t._v(" Comparison with Back Translation")]),t._v(" "),i("p",[t._v("It can be seen that noisy ST is able to beat BT on WMT100K and on the en-origin test set of FloRes. In contrast, BT is more effective on the ne-origin test set according to BLEU, which is not surprising as the ne-origin test is likely to benefit more from Nepali than English monolingual data.")]),t._v(" "),i("p",[i("img",{attrs:{src:a(684),alt:"image3"}})]),t._v(" "),i("h3",{attrs:{id:"analysis"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#analysis"}},[t._v("#")]),t._v(" Analysis")]),t._v(" "),i("p",[t._v("The authors analyze the effect of the following three factors on noisy self-training on the WMT14 dataset:")]),t._v(" "),i("ol",[i("li",[t._v("Parallel dat size")]),t._v(" "),i("li",[t._v("Monolingual dat size")]),t._v(" "),i("li",[t._v("Noise level\nThe result is shown in the above figure. In (a) we see that the performance gain is larger for intermediate value of the size of the parallel dataset, as expected. (b) illustrates that the performance keeps improving as the monolingual data size increases, albeit with diminishing returns.\n(c) demonstrates that performance is quite sensitive to noise level, and that intermediate values work best. It is still unclear how to select the noise level a priori, besides the usual hyper-parameter search to maximize BLEU on the validation set.")])]),t._v(" "),i("h2",{attrs:{id:"summary"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),i("p",[t._v("This work revisit self-training for neural sequence generation, especially machine translation task. It is shown that self-training can be an effective method to improve generalization, particularly when labeled data is scarce. Through comprehensive experiments, they prove that noise injected during self-training is critical and thus propose to perturb the input to obtain a variant of self-training, named noisy self-training, which show great power on machine translation and also text summarization tasks.")]),t._v(" "),i("h2",{attrs:{id:"references"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),i("p",[t._v('[1] He, Junxian, et al. "Revisiting Self-Training for Neural Sequence Generation." International Conference on Learning Representations. 2019.')])])}),[],!1,null,null,null);e.default=n.exports}}]);